<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 启用spring mvc 注解 -->
	<context:annotation-config />
	<!-- 启用Spring MVC注解 -->
	<mvc:annotation-driven />
	<!-- 设置使用注解的类所在的jar包 -->
	<context:component-scan base-package="com.fjnu.controller" />

	<!-- 配置适配器 -->
	<bean
		class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />

	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".html" />
	</bean>

	<!-- 从请求和响应读取/编写字符串 -->
	<bean id="messageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 用于将对象转化为JSON格式的数据 -->
	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="messageConverter" />
				<ref bean="jsonConverter" />
			</list>
		</property>
	</bean>

	<!-- 配置Spring MVC 数据验证 -->
	<!-- 配置数据验证注解
	<mvc:annotation-driven validator="validator"
		conversion-service="conversion-service" />
	注解适配器 
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer" ref="webBindingInitializer"></property>
	</bean>
	 配置校验器，使用HibernateValidator
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		不设置则默认为classpath下的 ValidationMessages.properties
		<property name="validationMessageSource" ref="validatemessageSource" />
	</bean>
	<bean id="conversion-service"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	配置提供数据验证信息的文件、编码以及缓存大小
	<bean id="validatemessageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>validateMessages.properties</value>
			</list>
		</property>
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean>
	自定义webBindingInitializer
	<bean id="webBindingInitializer"
		class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
		<property name="conversionService" ref="conversion-service" />
		<property name="validator" ref="validator" />
	</bean>
	Spring MVC数据验证配置结束 -->
	
	<!-- 统一异常处理器 ,class是自己写的实现HandlerExceptionResolver的类
	<bean class="com.hand.exception.CustomerExceptionResolver"></bean> -->
	
	<!-- 静态资源解析,为了支持RESTful风格，对webapps下的静态资源进行访问 -->
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/css/" mapping="/css/**"/>
	<mvc:resources location="/image/" mapping="/image/**"/>
	
	<!-- 拦截器
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/js/**"/>
			<mvc:exclude-mapping path="/css/**"/>
			<mvc:exclude-mapping path="/image/**"/>
			<bean class="com.fjnu.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	 -->
	
</beans>